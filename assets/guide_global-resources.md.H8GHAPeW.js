import{_ as e,o as a,c as s,R as t}from"./chunks/framework.GMe7lAwE.js";const k=JSON.parse('{"title":"全局资源","description":"","frontmatter":{},"headers":[],"relativePath":"guide/global-resources.md","filePath":"guide/global-resources.md"}'),o={name:"guide/global-resources.md"},i=t(`<h1 id="全局资源" tabindex="-1">全局资源 <a class="header-anchor" href="#全局资源" aria-label="Permalink to &quot;全局资源&quot;">​</a></h1><h2 id="svg-图标" tabindex="-1">SVG 图标 <a class="header-anchor" href="#svg-图标" aria-label="Permalink to &quot;SVG 图标&quot;">​</a></h2><p>越来越多项目开始使用 SVG 图标做为精灵图的替代品，本套件也提供了 SVG 图标支持，推荐去<a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">阿里巴巴矢量图标库</a>下载高质量 SVG 图标。</p><p>使用 SVG 图标也很简单，首先将 svg 文件放到 <code>/src/assets/icons/</code> 目录下，然后在页面中就可以通过 <code>&lt;svg-icon /&gt;</code> 组件使用了，name 就是 svg 文件名，如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- &lt;svg-icon /&gt; 组件无需手动注册即可使用 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">svg-icon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="图片" tabindex="-1">图片 <a class="header-anchor" href="#图片" aria-label="Permalink to &quot;图片&quot;">​</a></h2><p>图片资源都放在 <code>/src/assets/images/</code> 目录下，可自行新建文件夹分类管理。</p><h2 id="样式" tabindex="-1">样式 <a class="header-anchor" href="#样式" aria-label="Permalink to &quot;样式&quot;">​</a></h2><p>样式存放目录为 <code>/src/assets/styles/</code> ，因为 Vue 的文件特性，页面样式建议写在 <code>.vue</code> 文件里，所以该目录只存放全局样式，方便统一管理。</p><p>此目录下还有一个特殊目录，即 <code>/src/assets/styles/resources/</code> ，这是全局 SCSS 资源目录，首先这个目录里只支持 <code>.scss</code> 文件，其次在这个目录里的文件，无需在页面上引用即可生效并使用。</p><p>同样，精灵图目录下生成的 SCSS 资源也是全局可调用的。</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>全局 SCSS 资源并不是全局样式，是变量、@mixin 、@function 这些东西</p></div><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><h3 id="全局组件" tabindex="-1">全局组件 <a class="header-anchor" href="#全局组件" aria-label="Permalink to &quot;全局组件&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>公共组件在使用时，无需手动引入，框架会在你使用时自动引入，该特性由 <a href="https://github.com/antfu/unplugin-vue-components" target="_blank" rel="noreferrer">unplugin-vue-components</a> 提供支持。</p></div><p>公共组件存放在 <code>/src/components/</code> 目录下，每个组件按文件夹进行区分。</p><p>每个组件的文件夹内至少保留一个文件名为 <code>index.vue</code> 的组件入口（可参考 <code>SvgIcon</code> 组件），文件夹名称即为组件名。</p><p>推荐使用 <code>pnpm new</code> 指令进行组件生成，详细可查看《<a href="./plop.html">代码文件自动生成</a>》。</p><h3 id="局部组件" tabindex="-1">局部组件 <a class="header-anchor" href="#局部组件" aria-label="Permalink to &quot;局部组件&quot;">​</a></h3><p>局部组件没有提供专门的存放目录，我们建议采用就近原则，即局部组件与使用页面离得越近越好。你可以在每个模块的文件夹下，建立一个 <code>components</code> 文件夹用于存放局部组件。</p>`,20),c=[i];function n(l,r,d,p,h,u){return a(),s("div",null,c)}const m=e(o,[["render",n]]);export{k as __pageData,m as default};
